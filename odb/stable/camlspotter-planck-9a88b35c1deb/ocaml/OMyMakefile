# ==========================
# OMyMakefile
# ==========================
# Useful functions to build OCaml projects

#| A flag to tell that we can use OMyMakefile functions
WithOMy=true

.PHONY: all install uninstall clean

# Directories
# =====================================================================

#| The build root directory  
BIG_ROOT=$(dir .)

#| The prefix. Equal to the PREFIX environment variable
try
  PREFIX=$(getenv PREFIX)
default
  eprintln(Specify PREFIX environment variable.)
  exit 1 

# Installation mark files
# =======================================================================

#| To enable the installation mark files, you must define INSTALLED path variable
# for the mark file directory like INSTALLED=$(BIG_ROOT)/installed and make sure
# the directory $(INSTALLED) exists. This preparation must be done outside of 
# this OMyMakefile.

#|Returns the installation mark files of $(packs)
Installed(packs) = 
  if $(defined INSTALLED)
      return $(addprefix $(INSTALLED)/, $(packs))
  else
      return $(array)

#|Create md5 sum file of $(targets)
CreateCheckSum(pack, targets)=
    chan=$(fopen $(pack), w)
    fprintln($(chan), $(string $(targets)))
    fprintln($(chan), $(string $(digest $(targets))))
    close($(chan))

#|Create $(Installed $(pack)) file from the digests of $(targets)
CreateInstalled(pack, targets)=
    if $(defined INSTALLED)
        println(dump md5 $(INSTALLED)/$(pack))
        CreateCheckSum($(INSTALLED)/$(pack), $(targets))

# Misc tools
# ======================================================================

#|ditto.
mkdir_if_not_exists(dir) =
  if $(not $(test -e $(dir))):
    mkdir $(dir) 
  return

# OCamlFind
# ========================================================================

#|OMy requires OCamlFind! Do not ask me how to use OMy without OCamlFind. Please.
USE_OCAMLFIND = true
OCAMLFIND_DESTDIR=$(PREFIX)/lib/ocaml/site-lib

# OCaml -where
# ========================================================================

#|Path to the OCaml library directory
OCAML_WHERE = $(shell ocamlc -where)

#|Preinstalled libraries which are always available for normal ocaml.
#
# You may want to add the required packages which are built and installed out of OMy framework:
#
#::
#
#   include OMyMakefile
#   
#   OCAML_PREINSTALLED_PACKS += llvm # llvm has been installed already, independently
#   
#   Subdirs()
#
# It includes "findlib" by default. If you want to build findlib in OMy framework, you have to remove it from the list.
OCAML_PREINSTALLED_PACKS[]= bigarray camlp4 dbm dynlink graphics num num-top stdlib str threads unix findlib

# byte/nat
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
#|If set false in a project directory, byte compilation is disabled there.
BYTE_ENABLED = true

######################### Compiler
OCAMLPACKAGEFLAGS=

# Why we need "public." ?
public.OCamlC() =
    value $(OCAMLFIND) $(OCAMLC) $(OCAMLPACKAGEFLAGS) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS)\
              $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(PREFIXED_OCAMLINCLUDES)

public.OCamlOpt() =
    value $(OCAMLFIND) $(OCAMLOPT) $(OCAMLPACKAGEFLAGS) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS)\
              $(OCAMLOPTFLAGS) $(OCAMLPPFLAGS) $(PREFIXED_OCAMLINCLUDES)

# Spot files (OCamlSpotter)
# ==================================================================

#| OCAML_SPOT is true if the compiler supports ocamlspot
OCAML_SPOT = false
match $(string $(shell ocamlc -version)) # We cannot use OCamlC since there may not be ocamlfind
case $"ocamlspot"
  OCAML_SPOT = true 
  export

#| Define OCAML_ANNOT so that custom ocamlc/ocamlopt automatically create spot/spit/annot files, even without -annot option.
setenv(OCAML_ANNOT, 1)

# Additional implicit rules by file extensions

# annot, spot, spit files
%.annot %.spot: %.ml %.cmi
	$(OCamlC) -c $<

%.spit: %.mli 
	$(OCamlC) -c $<

# Packages
# =========================================================

#| OCaml packages required for compilation. MyCaml* functions automatically add necessary dependencies over packages in $(OCAMLPACKS).
# 
# .. note:: They are also required for dependency analysis.
public.OCAMLPACKS[]=

#| CamlP4 syntax extension packages required for parsing. MyCaml* functions automatically add necessary dependencies over packages in $(CAMLP4PACKS).
public.CAMLP4PACKS[]=

# Dependencies
# =========================================================================

#|Returns packages managed by OMy framework
OMyManagedPackages(packages) =
   return $(set-diff $(packages), $(OCAML_PREINSTALLED_PACKS))

#|Add dependencies of any build activity of this directory over $(files).
#
# .. note:: These functions introduce implicit rules: *you may need to export it, if you use this function in a local context.*
RequireFiles(files) =
    .SCANNER: scan-%: $(files)
    % : $(files)
    export

#|Add dependencies of any build activity over $(packages).
#
# .. note:: These functions introduce implicit rules: *you may need to export it, if you use this function in a local context.*
RequirePackages(packages) =
    RequireFiles($(OMyManagedPackages $(packages)))
    export

#|Add dependencies of any build activity of this directory over $(targets) and their dependencies
# Creates an intermidiate md5 memo dependencies.md5
#
# .. note:: These functions introduce implicit rules: *you may need to export it, if you use this function in a local context.*
RequireBuild(targets) =
    dependencies.md5: $(targets)
        CreateCheckSum($@, $(sequence-sort $(compare), $(dependencies-all $(targets))))
    RequireFiles(dependencies.md5)
    export

#|Add dependencies of OCaml compiled files (cmx, cmo, etc.) over $(packages).
# $(packages) listed in OCAML_PREINSTALLED_PACKS are ignored.
#
# .. note:: These functions introduce implicit rules: *you may need to export it, if you use this function in a local context.*
#
# .. note:: Usually you do not need to call this function. Use OCAMLPACKS variable instead. 
OCamlRequirePackages(packages) =
    packages += findlib # Yes we use findlib
    required_packs = $(OMyManagedPackages $(packages))
    %.cmx %.cmo %.cmi %.cma %.cmxa %.annot %.spot %.spit : $(Installed $(required_packs))
    export

#|Add dependencies of OCaml dependency analysis and build over $(packages).
# Use this for adding dependencies for CamlP4 extensions.
# $(packages) listed in OCAML_PREINSTALLED_PACKS are ignored.
#
# .. note:: These functions introduce implicit rules: *you may need to export it, if you use this function in a local context.*
#
# .. note:: Usually you do not need to call this function. Use CAML4PACKS variable instead. 
OCamlRequireCamlP4Packages(packages) =
    packages += findlib # Yes we use findlib
    required_packs = $(OMyManagedPackages $(packages))
    .SCANNER: scan-ocaml-%: $(Installed $(required_packs))
    %.cmx %.cmo %.cmi %.cma %.cmxa %.annot %.spot %.spit : $(Installed $(required_packs))
    export

#|``omake xxx.auto.mli`` generates .mli file from xxx.ml 
%.auto.mli: %.ml
	$(OCamlC) -i -c $< > $@

# Build rules
# ==========================================================

# Extend the bundled OCamlPackage with .spot creation
public.OCamlPackage(name, files) =
   # XXX: JYH: these variables should be marked private in 0.9.9
   protected.OFILES   = $(addsuffix $(EXT_OBJ), $(files))
   protected.CMOFILES = $(addsuffix .cmo, $(files))
   protected.CMXFILES = $(addsuffix .cmx, $(files))

   protected.OBJ       = $(file $(name)$(EXT_OBJ))
   protected.CMO       = $(file $(name).cmo)
   protected.CMX       = $(file $(name).cmx)
   protected.CMI       = $(file $(name).cmi)
   protected.MLI       = $(file $(name).mli)

   protected.BYTE_TARGETS   = $(CMO)
   protected.NATIVE_TARGETS = $(CMX) $(OBJ)

   if $(OCAML_SPOT)
       if $(BYTE_ENABLED)
          BYTE_TARGETS += $(file $(name).spot)
          export
       else
          NATIVE_TARGETS += $(file $(name).spot)
          export
       export

   protected.TARGETS = $(CMI)
   if $(NATIVE_ENABLED)
       TARGETS += $(NATIVE_TARGETS)
       export

   if $(BYTE_ENABLED)
       TARGETS += $(BYTE_TARGETS)
       export

   #
   # Link commands
   #
   protected.BYTE_DEPS = $(CMOFILES)
   $(BYTE_TARGETS): $(CMOFILES)
      section rule
         if $(or $(NATIVE_ENABLED), $(target-exists $(MLI)))
             BYTE_DEPS += $(CMI)
             export
         else
             BYTE_TARGETS += $(CMI)
             export
         $(BYTE_TARGETS): $(BYTE_DEPS)
            $(OCAMLFIND) $(OCAMLC) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
                $(OCAMLCFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMO) $(OCamlLinkSort $(CMOFILES))

   protected.NATIVE_DEPS = $(CMXFILES) $(OFILES)
   $(NATIVE_TARGETS): $(NATIVE_DEPS)
      section rule
         if $(target-exists $(MLI))
            NATIVE_DEPS += $(CMI)
            export
         else
            NATIVE_TARGETS += $(CMI)
            export
         $(NATIVE_TARGETS): $(NATIVE_DEPS)
            $(OCAMLFIND) $(OCAMLOPTLINK) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
                $(OCAMLOPTFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMX) $(OCamlLinkSort $(CMXFILES))

   $(CMI):
      section rule
         if $(target-exists $(MLI))
            $(CMI): $(MLI) :scanner: scan-ocaml-$(name).mli
                $(OCamlC) -c $<
         elseif $(NATIVE_ENABLED)
            $(NATIVE_TARGETS) $(CMI): $(NATIVE_DEPS)
               $(OCAMLFIND) $(OCAMLOPTLINK) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
                   $(OCAMLOPTFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMX) $(OCamlLinkSort $(CMXFILES))
         else
            $(BYTE_TARGETS) $(CMI): $(BYTE_DEPS)
               $(OCAMLFIND) $(OCAMLC) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
                   $(OCAMLCFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMO) $(OCamlLinkSort $(CMOFILES))

   return $(TARGETS)

# Add implicit dependencies over the packages declared in OCAMLPACKS and CAMLP4PACKS
# If this function is used in a local scope, you may want to export. 
AddLocalOCamlPackageDependencies() =
  # We make sure the required libraries are installed
  OCamlRequirePackages($(OCAMLPACKS)) # must be exported!
  OCamlRequireCamlP4Packages($(OCAMLPACKS) $(CAMLP4PACKS))
  export

#| Add a rule for OCaml package $(library_name).cmo, $(library_name).cmx and etc.
#     library_name
#         target package name
#     files
#         ML module names (without .ml)
#     cmodules
#         C source files (without .c)
#     linkopts
#         C library link option (without OCaml -cclib options)    
#
#  Example::
#
#      MyOCamlPackage(foo, alpha beta, $(EMPTY), $(EMPTY))
#
#  Todo: external C library
MyOCamlPackage(library_name, files, cmodules, linkopts) =
  AddLocalOCamlPackageDependencies()
  export # The above thing is local: need to be exported

  CSTUBS=$(addsuffix .o,$(cmodules))
  CMOS=$(addsuffix .cmo,$(library_name))
  CMXS=$(addsuffix .cmx,$(library_name))
  CMA=$(library_name).cma
  CMXA=$(library_name).cmxa

  CSTUBLIBRARIES=
  if $(not $(equal $(cmodules), $(EMPTY)))
      CSTUBLIBRARIES= dll$(library_name).so lib$(library_name).a 
      export

  # CR jfuruse: I guess we do not need the following
  # export # export the implicit rule above

  .DEFAULT: $(library_name).cmo $(library_name).cmx $(library_name).cma $(library_name).cmxa

  $(CMA) $(CMXA) $(library_name).a $(CSTUBLIBRARIES) : $(CSTUBS) $(CMOS) $(CMXS)
      ocamlmklib -verbose -o $(library_name) $(CSTUBS) $(linkopts) $(CMOS) $(CMXS)

  ## the followings are necessary for packing

  OCAMLPACKAGEFLAGS += -for-pack $(capitalize $(library_name))
  export OCAMLPACKAGEFLAGS

  ## build rule

  OCamlPackage($(library_name), $(files))

  ## clean
  AutoClean()
  clean:
	rm -f $(library_name).spot

  ## install

  # CR jfuruse: x.cmi is required if x.mli does not exist!
  targets[]=META $(glob i, *.mli) $(library_name).cmi $(library_name).cmo $(library_name).cmx $(library_name).cma $(library_name).cmxa $(library_name).o

  if $(OCAML_SPOT)
    targets[]+= $(library_name).spot

  $(BIG_ROOT)/installed/$(library_name): $(targets)
	$(OCAMLFIND) remove $(library_name)
	section:
          $(OCAMLFIND) install $(library_name) $(targets)
          CreateInstalled($(library_name), $(targets))

  install: $(BIG_ROOT)/installed/$(library_name)

  uninstall:
	rm -f $(BIG_ROOT)/installed/$(library_name)
	$(OCAMLFIND) remove $(library_name)

############################################################## build ocaml exec

#| Add a rule to build a program $(name)
#      name
#          Name of the program
#      files
#          OCaml module names (without .ml)
MyOCamlProgram(name, files) =
  AddLocalOCamlPackageDependencies()
  export # The above thing is local: need to be exported

  $(name).run $(name).opt: $(Installed $(OMyManagedPackages $(OCAMLPACKS)))

  # CR jfuruse: forgot to add the deps over the packages!
  .DEFAULT: $(OCamlProgram $(name), $(files))

  # The following clean the files twice if MyOCamlPackge coexists,
  # but who cases ?
  AutoClean()

#|  Add rules to build OCaml library $(name)
#        name
#            Name of the library
#        files
#            OCaml module name (without .ml)
#
#   .. note :: Probably you should use MyOCamlPackage
MyOCamlLibrary(name, files) =
  AddLocalOCamlPackageDependencies()
  export # The above thing is local: need to be exported

  # CR jfuruse: forgot to add the deps over the packages!
  .DEFAULT: $(OCamlLibrary $(name), $(files))

  # The following clean the files twice if MyOCamlPacakge coexists,
  # but who cases ?
  AutoClean()

# Auto clean
# ====================================================================

#| Install clean command which cleans all the target files exists under the directory. Use with care.
AutoClean()=
    .PHONY: clean
    clean:
        rm -f $(filter-proper-targets $(ls R, .))

# Subdir traversal
# =====================================================================

#| Recursively traverse the subdirs except $(dirs)
Subdirs_except(dirs) =
  # println(PWD: $(shell pwd))

  # need to export since .SUBDIRS is evaluated in the global scope
  export VISIT_SUBDIRS

  sub_omakefiles = $(glob i, */OMakefile)
  subdirs = $(sub_omakefiles.map $(dirname))

  VISIT_SUBDIRS=$(set-diff $(subdirs), $(dirs))

  # printing requires $(string ...) to convert arrays to strings
  # println(SUBDIRS: $(string $(VISIT_SUBDIRS)))

  # The rule
  .SUBDIRS: $(VISIT_SUBDIRS)

#| Recursively traverse all the subdirs
Subdirs() =
  Subdirs_except($(array))

#| Recursively traverse the given subdirs $(dirs)
Subdirs_only(dirs) =
 .SUBDIRS: $(dirs)

# Dependency dot files for Graphviz
# ======================================================================

#| Add a rule for ``depend.dot`` for a dependency graph of OCaml files in the current directory
Dot() =
	depend.dot: $(ls *.ml *.mli)
	    $(OCAMLFIND) ocamldoc -I +threads $(OCAMLPACKAGEFLAGS) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLPPFLAGS) $(PREFIXED_OCAMLINCLUDES) -dot -dot-include-all -dot-reduce $+ -o $@


