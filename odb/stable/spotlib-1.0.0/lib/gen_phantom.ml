open Format
open Xformat
open Xlist

let def_c ppf n = 
  fprintf ppf "let c%d %a = [%a]@."
    n
    (list (fun ppf -> fprintf ppf " ")
       (fun ppf i -> fprintf ppf "t%d" i)) (from_to 0 (n-1))
    (list (fun ppf -> fprintf ppf "; ")
       (fun ppf i -> fprintf ppf "t%d" i)) (from_to 0 (n-1))

let def_d ppf n = 
  fprintf ppf "let d%d = function [%a] -> (%a) | _ -> assert false@."
    n
    (list (fun ppf -> fprintf ppf "; ")
       (fun ppf i -> fprintf ppf "t%d" i)) (from_to 0 (n-1))
    (list (fun ppf -> fprintf ppf ", ")
       (fun ppf i -> fprintf ppf "t%d" i)) (from_to 0 (n-1))

let def_get ppf n = fprintf ppf "let get%d l = List.nth l %d@." n n

(*
      unit
      'a0 * unit
      'a0 * ('a1 * unit)
      'a0 * ('a1 * ('a2 * unit))
*)
let type_tpl last ppf n = 
  let rec tpl x ppf = function
    | 0 -> fprintf ppf last
    | n -> fprintf ppf "('a%d * %a)" (x - 1) (tpl (x+1)) (n-1) 
  in
  tpl 1 ppf n

let exp_tpl ppf = function
  | 0 -> fprintf ppf "tpl0"
  | 1 -> fprintf ppf "'a0 tpl1"
  | n -> 
      fprintf ppf "(%a) tpl%d"
        (list (fun ppf -> fprintf ppf ",")
           (fun ppf i -> fprintf ppf "'a%d" i)) (from_to 0 (n-1))
        n

let def_tpl ppf = function
  | 0 -> fprintf ppf "type tpl0 = unit@."
  | 1 -> fprintf ppf "type %a = %a@." exp_tpl 1 (type_tpl "unit") 1
  | n -> 
      fprintf ppf "type %a = %a@."
        exp_tpl n
        (type_tpl "unit") n

let sig_c ppf n =
  fprintf ppf "val c%d : %a(%a,'c) ts@."
    n
    (list (fun _ppf -> ())
       (fun ppf i -> fprintf ppf "('a%d,'c) t -> " i)) (from_to 0 (n-1))
    exp_tpl n
 
let sig_d ppf n =
  fprintf ppf "val d%d : (%a,'c) ts -> %a@."
    n
    exp_tpl n
    (list (fun ppf -> fprintf ppf " * ")
       (fun ppf i -> fprintf ppf "('a%d,'c) t" i)) (from_to 0 (n-1))
 
let sig_get ppf n =
  fprintf ppf "val get%d : (%a,'c) ts -> ('a%d,'c) t@."
    (n - 1)
    (type_tpl "_") n
    (n - 1)

let sig_uncurry ppf = function
  | 0 -> fprintf ppf "val uncurry0 : (unit -> 'z) -> ((tpl0, 'c) ts -> 'z)@."
  | n ->
      fprintf ppf "val uncurry%d : (%a -> 'z) -> ((%a, 'c) ts -> 'z)@."
        n
        (list (fun ppf -> fprintf ppf " -> ")
           (fun ppf i -> fprintf ppf "('a%d,'c) t" i)) (from_to 0 (n-1))
        exp_tpl n

let def_uncurry ppf = function
  | 0 -> fprintf ppf "let uncurry0 f _tpl = f ()@."
  | n ->
      fprintf ppf "let uncurry%d f tpl = f %a@."
        n
        (list (fun ppf -> fprintf ppf " ")
           (fun ppf i -> fprintf ppf "(get%d tpl : ('a%d,'c) t)" i i)) (from_to 0 (n-1))

let sig_curry ppf = function
  | 0 -> fprintf ppf "val curry0 : ((tpl0,'c) ts -> 'z) -> unit -> 'z@."
  | n ->
      fprintf ppf "val curry%d : ((%a,'c) ts -> 'z) -> (%a -> 'z)@."
        n
        exp_tpl n
        (list (fun ppf -> fprintf ppf " -> ")
           (fun ppf i -> fprintf ppf "('a%d,'c) t" i)) (from_to 0 (n-1))

let def_curry ppf = function
  | 0 -> fprintf ppf "let curry0 f () = f c0@."
  | n ->
      fprintf ppf "let curry%d f %a = f (c%d %a)@."
        n
        (list (fun ppf -> fprintf ppf " ")
           (fun ppf i -> fprintf ppf "(v%d : ('a%d,'c) t)" i i)) (from_to 0 (n-1))
        n
        (list (fun ppf -> fprintf ppf " ")
           (fun ppf i -> fprintf ppf "v%d" i)) (from_to 0 (n-1))

let max = 10

let cat fn =
  let ic = open_in fn in
  let rec loop () =
    let l = input_line ic in
    printf "%s\n" l;
    loop ()
  in
  try loop () with _ -> close_in ic

let _ =
  Arg.parse [] (function 
    | "ml" ->
        printf "(* This is an autogenerated file. Do not edit. *)@.@.";
        cat "phantom_head.ml";
        for i = 0 to max do
          def_c stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          def_d stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          def_get stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          def_tpl stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          def_uncurry stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          def_curry stdout i
        done;
        fprintf stdout "@.";
        cat "phantom_tail.ml";
    | "mli" ->
        printf "(* This is an autogenerated file. Do not edit. *)@.@.";
        cat "phantom_head.mli";
        for i = 0 to max do
          def_tpl stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          sig_c stdout i
        done;
        fprintf stdout "@.";
        for i = 1 to max do
          sig_d stdout i
        done;
        fprintf stdout "@.";
        for i = 1 to max do
          sig_get stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          sig_uncurry stdout i
        done;
        fprintf stdout "@.";
        for i = 0 to max do
          sig_curry stdout i
        done;
    | _ -> failwith "give ml or mli")
    "gen_phantom [ml|mli]"
